#include <vector>
#include <utility>

/*
Given weights and values of N items, put these items in a knapsack of capacity
"weight" to get the maximum total value in the knapsack. In other words, given
two integer arrays item_vals[0..n-1] and item_weights[0..n-1] which represent
values and weights associated with N items respectively.

Also given an integer "weight" which represents knapsack capacity, find out the
maximum value subset of item_vals[] such that sum of the weights of this subset
is smaller than or equal to "weight". You cannot break an item, either pick the
complete item or donâ€™t pick it (0-1 property).
*/

int knapSack(int weight, const std::vector<int> &item_weights, const std::vector<int> &item_vals)
{
    return -1;
}

